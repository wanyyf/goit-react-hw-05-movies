{"version":3,"file":"static/js/Movies.bf4e2bbc.chunk.js","mappings":"uQAAA,IAAMA,EAAU,mCACHC,EAAW,WACtB,OAAOC,MAAM,yDAAD,OAC+CF,IACzDG,MAAK,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,aACvB,GACF,EACYC,EAAa,SAAAC,GACxB,OAAOT,MAAM,sCAAD,OAC4BS,EAD5B,oBAC0CX,EAD1C,oBAEVG,MAAK,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,aACvB,GACF,EAEYG,EAAkB,SAAAD,GAC7B,OAAOT,MAAM,sCAAD,OAC4BS,EAD5B,4BACkDX,EADlD,oBAEVG,MAAK,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,aACvB,GACF,EACYI,EAAkB,SAAAF,GAC7B,OAAOT,MAAM,sCAAD,OAC4BS,EAD5B,4BACkDX,EADlD,2BAEVG,MAAK,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,aACvB,GACF,EACYK,EAAkB,SAAAC,GAC7B,OAAOb,MAAM,qDAAD,OAC2CF,EAD3C,iCAC2Ee,EAD3E,gCAEVZ,MAAK,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,aACvB,GACF,C,yGCKD,UApDe,WACb,OAAsCO,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMT,EAAQO,EAAaG,IAAI,SAC3BV,GACFW,EAAkBX,EAErB,GAAE,CAACO,IAVe,SAuBJI,EAvBI,0EAuBnB,WAAiCX,GAAjC,kFACQD,EAAAA,EAAAA,IAAgBC,GACnBZ,MAAK,SAAAwB,GAAI,OAAIP,EAAeO,EAAKC,QAAxB,IACTC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IAHhB,4CAvBmB,sBA6BnB,OACE,iCACE,kBAAMG,SAdW,SAAAC,GACnBA,EAAIC,iBACJZ,EAAgB,CAAER,MAAOE,IACzBS,EAAkBT,EACnB,EAUG,WACE,kBAAOmB,KAAK,OAAOC,MAAOpB,EAAaqB,SApBvB,SAAAJ,GACpB,IAAMG,EAAQH,EAAIK,OAAOF,MAEzBnB,EAAemB,EAChB,KAiBK,mBAAQD,KAAK,SAAb,uBAEDjB,EAAYqB,OAAS,IACpB,wBACGrB,EAAYsB,KAAI,SAAAC,GACf,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAG/B,IAAxB,SACG+B,EAAGE,gBAAkBF,EAAGG,QAFpBH,EAAG/B,GAMf,QAKV,C","sources":["Api/movieApi.js","pages/Movies.jsx"],"sourcesContent":["const API_KEY = 'df75de766bc216630e148042dff14934';\nexport const movieApi = () => {\n  return fetch(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`!!Error!!`));\n  });\n};\nexport const movieIdApi = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`!!Error!!`));\n  });\n};\n\nexport const movieCreditsApi = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`!!Error!!`));\n  });\n};\nexport const movieReviewsApi = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`!!Error!!`));\n  });\n};\nexport const movieSearchsApi = query => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`!!Error!!`));\n  });\n};\n","import { useState } from 'react';\nimport { movieSearchsApi } from 'Api/movieApi';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nconst Movies = () => {\n  const [searchInput, setSearchInput] = useState('');\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (query) {\n      filmSearchRequest(query);\n    }\n  }, [searchParams]);\n\n  const onInputChange = evt => {\n    const value = evt.target.value;\n\n    setSearchInput(value);\n  };\n  const onSubmitForm = evt => {\n    evt.preventDefault();\n    setSearchParams({ query: searchInput });\n    filmSearchRequest(searchInput);\n  };\n\n  async function filmSearchRequest(query) {\n    await movieSearchsApi(query)\n      .then(data => setSearchFilms(data.results))\n      .catch(error => console.log(error));\n  }\n\n  return (\n    <>\n      <form onSubmit={onSubmitForm}>\n        <input type=\"text\" value={searchInput} onChange={onInputChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n      {searchFilms.length > 0 && (\n        <ul>\n          {searchFilms.map(el => {\n            return (\n              <li key={el.id}>\n                <Link to={`/movies/${el.id}`}>\n                  {el.original_title || el.name}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","movieApi","fetch","then","response","ok","json","Promise","reject","Error","movieIdApi","id","movieCreditsApi","movieReviewsApi","movieSearchsApi","query","useState","searchInput","setSearchInput","searchFilms","setSearchFilms","useSearchParams","searchParams","setSearchParams","useEffect","get","filmSearchRequest","data","results","catch","error","console","log","onSubmit","evt","preventDefault","type","value","onChange","target","length","map","el","to","original_title","name"],"sourceRoot":""}